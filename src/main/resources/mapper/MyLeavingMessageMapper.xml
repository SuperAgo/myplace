<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myplace.models.dao.MyLeavingMessageMapper">
  <resultMap id="BaseResultMap" type="com.myplace.models.entity.MyLeavingMessage">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="blog_id" jdbcType="INTEGER" property="blogId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="parent_name" jdbcType="VARCHAR" property="parentName" />
    <result column="network_avatar" jdbcType="VARCHAR" property="networkAvatar" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="message" jdbcType="VARCHAR" property="message" />
    <result column="ins_time" jdbcType="TIMESTAMP" property="insTime" />
    <result column="comments" jdbcType="INTEGER" property="comments" />
    <result column="compliments" jdbcType="INTEGER" property="compliments" />
  </resultMap>
  <sql id="Base_Column_List">
    id, parent_id,blog_id, name, email, message, ins_time, comments, compliments
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from my_leaving_message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from my_leaving_message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.myplace.models.entity.MyLeavingMessage">
    insert into my_leaving_message (id, parent_id, blog_id, name,
      email, message, ins_time, 
      comments, compliments)
    values (#{id,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER},#{blogId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{email,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, #{insTime,jdbcType=TIMESTAMP}, 
      #{comments,jdbcType=INTEGER}, #{compliments,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.myplace.models.entity.MyLeavingMessage">
    insert into my_leaving_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="message != null">
        message,
      </if>
      <if test="insTime != null">
        ins_time,
      </if>
      <if test="comments != null">
        comments,
      </if>
      <if test="compliments != null">
        compliments,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        #{message,jdbcType=VARCHAR},
      </if>
      <if test="insTime != null">
        #{insTime,jdbcType=TIMESTAMP},
      </if>
      <if test="comments != null">
        #{comments,jdbcType=INTEGER},
      </if>
      <if test="compliments != null">
        #{compliments,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.myplace.models.entity.MyLeavingMessage">
    update my_leaving_message
    <set>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="message != null">
        message = #{message,jdbcType=VARCHAR},
      </if>
      <if test="insTime != null">
        ins_time = #{insTime,jdbcType=TIMESTAMP},
      </if>
      <if test="comments != null">
        comments = #{comments,jdbcType=INTEGER},
      </if>
      <if test="compliments != null">
        compliments = #{compliments,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myplace.models.entity.MyLeavingMessage">
    update my_leaving_message
    set parent_id = #{parentId,jdbcType=INTEGER},
      blog_id = #{blogId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      message = #{message,jdbcType=VARCHAR},
      ins_time = #{insTime,jdbcType=TIMESTAMP},
      comments = #{comments,jdbcType=INTEGER},
      compliments = #{compliments,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectCommentByBlogId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
        t1.id,
        t1.parent_id,
        t1.blog_id,
        mu.nick_name AS NAME,
        mu.network_avatar,
        t1.email,
        t1.message,
        t1.ins_time,
        t1.comments,
        t1.compliments,
        t2. NAME AS parent_name
    FROM
        my_leaving_message t1
    JOIN my_user AS mu ON mu.email = t1.email
    LEFT JOIN my_leaving_message t2 ON t1.parent_id = t2.id
    WHERE
        1 = 1
    AND t1.parent_id IS NULL
    AND t1.blog_id = 8
    ORDER BY
        comments DESC
    LIMIT 5
  </select>

  <select id="selectListByParentId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
        t1.id,
        t1.parent_id,
        t1.blog_id,
        mu.nick_name AS NAME,
        mu.network_avatar,
        t1.email,
        t1.message,
        t1.ins_time,
        t1.comments,
        t1.compliments,
        mu2.nick_name AS parent_name
    FROM
        my_leaving_message t1
    JOIN my_user AS mu ON mu.email = t1.email
    LEFT JOIN my_leaving_message t2 ON t1.parent_id = t2.id
    LEFT JOIN my_user AS mu2 ON mu2.email = t2.email
    WHERE
        t1.id IN (
            SELECT
                id
            FROM
                (
                    SELECT
                        t1.id,

                    IF (
                        FIND_IN_SET(parent_id, @pids) > 0,
                        @pids := CONCAT(@pids, ',', id),
                        0
                    ) AS ischild
                    FROM
                        (
                            SELECT
                                id,
                                parent_id
                            FROM
                                my_leaving_message t
                            WHERE
                                t.blog_id = #{blogId}
                            ORDER BY
                                parent_id,
                                id
                        ) t1,
                        (SELECT @pids := #{parentId} t2) t3
                ) tm
            WHERE
                ischild != 0
        )
  </select>

  <select id="selectLeavingMessageList" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
        t1.id,
        t1.parent_id,
        t1.blog_id,
        mu.nick_name AS NAME,
        mu.network_avatar,
        t1.email,
        t1.message,
        t1.ins_time,
        t1.comments,
        t1.compliments,
        t2. NAME AS parent_name
    FROM
        my_leaving_message t1
    JOIN my_user AS mu ON mu.email = t1.email
    LEFT JOIN my_leaving_message t2 ON t1.parent_id = t2.id
    WHERE
        1 = 1
    AND t1.parent_id IS NULL
    AND t1.blog_id IS NULL
    ORDER BY
	    t1.ins_time DESC
  </select>

  <select id="selectLeavingMessageListByParentId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
        t1.id,
        t1.parent_id,
        t1.blog_id,
        mu.nick_name AS NAME,
        mu.network_avatar,
        t1.email,
        t1.message,
        t1.ins_time,
        t1.comments,
        t1.compliments,
        mu2.nick_name AS parent_name
    FROM
        my_leaving_message t1
    JOIN my_user AS mu ON mu.email = t1.email
    LEFT JOIN my_leaving_message t2 ON t1.parent_id = t2.id
    LEFT JOIN my_user AS mu2 ON mu2.email = t2.email
    WHERE
        t1.id IN (
            SELECT
                id
            FROM
                (
                    SELECT
                        t1.id,

                    IF (
                        FIND_IN_SET(parent_id, @pids) > 0,
                        @pids := CONCAT(@pids, ',', id),
                        0
                    ) AS ischild
                    FROM
                        (
                            SELECT
                                id,
                                parent_id
                            FROM
                                my_leaving_message t
                            WHERE
                                t.blog_id IS NULL
                            ORDER BY
                                parent_id,
                                id
                        ) t1,
                        (SELECT @pids := #{parentId} t2) t3
                ) tm
            WHERE
                ischild != 0
        )
  </select>
</mapper>